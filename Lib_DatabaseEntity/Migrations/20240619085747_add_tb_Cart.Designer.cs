// <auto-generated />
using System;
using Lib_DatabaseEntity.DbContext_SQL_Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lib_DatabaseEntity.Migrations
{
    [DbContext(typeof(Db_Context))]
    [Migration("20240619085747_add_tb_Cart")]
    partial class add_tb_Cart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lib_Models.Model_Entities.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isBan")
                        .HasColumnType("bit");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<int>("idAccount")
                        .HasColumnType("int");

                    b.Property<int>("idProduct")
                        .HasColumnType("int");

                    b.Property<float>("priceTotal")
                        .HasColumnType("real");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("idAccount");

                    b.HasIndex("idProduct");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.CategoryChildren", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("idCategoryParents")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("idCategoryParents");

                    b.ToTable("CategoryChildren");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.CategoryParents", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("CategoryParents");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("countProduct")
                        .HasColumnType("int");

                    b.Property<string>("describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idBrand")
                        .HasColumnType("int");

                    b.Property<int>("idCategory")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isDelete")
                        .HasColumnType("int");

                    b.Property<bool>("isSale")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<float>("priceSale")
                        .HasColumnType("real");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("idBrand");

                    b.HasIndex("idCategory");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.Cart", b =>
                {
                    b.HasOne("Lib_Models.Model_Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("idAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib_Models.Model_Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.CategoryChildren", b =>
                {
                    b.HasOne("Lib_Models.Model_Entities.CategoryParents", "CategoryParents")
                        .WithMany()
                        .HasForeignKey("idCategoryParents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryParents");
                });

            modelBuilder.Entity("Lib_Models.Model_Entities.Product", b =>
                {
                    b.HasOne("Lib_Models.Model_Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("idBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib_Models.Model_Entities.CategoryChildren", "CategoryChildren")
                        .WithMany()
                        .HasForeignKey("idCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CategoryChildren");
                });
#pragma warning restore 612, 618
        }
    }
}
